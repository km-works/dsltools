/*
 *   Copyright (C) 2012-2017 Christian P. Lerch, Vienna, Austria.
 *
 *   This file is part of DSLtools - a suite of software tools for effective
 *   DSL implementations.
 *
 *   DSLtools is free software: you can use, modify and redistribute it under
 *   the terms of the GNU General Public License version 3 as published by
 *   the Free Software Foundation, Inc. <http://fsf.org/>
 *
 *   DSLtools is distributed in the hope that it will be useful, but WITHOUT
 *   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *   FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 *   version 3 for details.
 *
 *   You should have received a copy of the GNU General Public License along
 *   with this distribution. If not, see <http://km-works.eu/res/GPL.txt> or
 *   <http://www.gnu.org/licenses/gpl-3.0.html>.
 */

/**
 * Definition of common identifiers.
 */
module base.Identifiers(Spacing);

import Spacing;

body {
  static {
    add(JAVA_RESERVED_WORDS, new String[] {
        "abstract",     "assert",       "break",        "case",         "catch",     
        "class",        "const",        "continue",     "default",      "do",        
        "else",         "enum",         "extends",      "final",        "finally",       
        "for",          "goto",         "if",           "implements",   "import",        
        "instanceof",   "interface",    "native",       "new",          "package",    
        "private",      "protected",    "public",       "return",       "static",       
        "strictfp",     "super",        "switch",       "synchronized", "this",
        "throw",        "throws",       "transient",    "try",          "volatile",     
        "while",        "void",         "null",         "true",         "false"
    });
    add(JAVA_RESERVERD_TYPES, new String[] {
        "boolean",      "byte",         "char",         "double",       "float", 
        "int",          "long",         "short"
    });
  }
}

option setOfString(JAVA_RESERVED_WORDS), setOfString(JAVA_RESERVERD_TYPES);


String JIdentifier 
    =   yyValue:JIdentWord 
        &{ !contains(JAVA_RESERVED_WORDS, yyValue) && !contains(JAVA_RESERVERD_TYPES, yyValue) } 
;

String JTypeName
    =   yyValue:JIdentWord 
        &{ !contains(JAVA_RESERVED_WORDS, yyValue) }
;

transient String JIdentWord 
    =   start:_ &{ Character.isJavaIdentifierStart(start) }
        ( part:_ &{ Character.isJavaIdentifierPart(part) } )*
;

String JPkgNamePart
    =   f:JPkgNameFirst r:JPkgNameRest
        { yyValue = f + r; }
;

transient String JPkgNameFirst
    =   [a-z]
;
transient String JPkgNameRest
    =   ( JPkgNameFirst / [0-9_] )*
;

