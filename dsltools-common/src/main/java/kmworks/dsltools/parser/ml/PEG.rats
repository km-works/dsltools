/*
 *   Copyright (C) 2012-2017 Christian P. Lerch, Vienna, Austria.
 *
 *   This file is part of DSLtools - a suite of software tools for effective
 *   DSL implementations.
 *
 *   DSLtools is free software: you can use, modify and redistribute it under
 *   the terms of the GNU General Public License version 3 as published by
 *   the Free Software Foundation, Inc. <http://fsf.org/>
 *
 *   DSLtools is distributed in the hope that it will be useful, but WITHOUT
 *   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *   FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 *   version 3 for details.
 *
 *   You should have received a copy of the GNU General Public License along
 *   with this distribution. If not, see <http://km-works.eu/res/GPL.txt> or
 *   <http://www.gnu.org/licenses/gpl-3.0.html>.
 */
module PEG;

import base.Spacing;    // w EOI Newline etc
import base.Strings;    // EscapedStringLiteral CodePointRange etc

header {
import java.util.*;
import kmworks.dsltools.parser.base.*;
import nu.xom.Element;
}

option parser(kmworks.dsltools.parser.ml.PEG_Parser);

/*
  Grammar PEG
  -----------
  Based on Bryan Ford: "Parsing Expression Grammars: A Recognition-Based Syntactic Foundation"
  Massachusetts Institute of Technology, 2004-01
*/

/*   
 *    Grammar :: Production+
 */
public Element Start
    =   w p:Production+ EOI
        { yyValue = NodeFactory.mkGrammar(p); }
;

/*
 *    Production :: Identifier Choice
 */
Element Production
    =   id:Identifier DEFINES w ch:Choice
        { yyValue = NodeFactory.mkProduction(id, ch); }
;

/*
 *  Choice :: Sequence+ EpsilonSequence?
 */
Element Choice
    =   hd:Sequence tl:(void:ALT seq:Sequence)* eps:ALT?
        { yyValue = NodeFactory.mkChoice(hd, tl, eps!=null); }
;

/*   
 *  Sequence :: Term+
 */
Element Sequence
    =   hd:Term tl:NextTerm*
        { yyValue = NodeFactory.mkSequence(hd, tl); }
;

/*
 *    Note: LINEBREAK can be used between Terms to break a long sequence of terms into
 *          smaller chunks and thus implementing line breaks in a visual representation
 *          of the AST
 */
Element NextTerm
    =   t:Term lb:LINEBREAK?
        { yyValue = NodeFactory.linebreakTerm(t, lb!=null); }
;

/*   
 *  Term :: predicate? Primary multiplicity?
 */
Element Term 
    =   pre:( AND / NOT )? prim:Primary mult:( OPTION / STAR / PLUS )?
        { yyValue = NodeFactory.mkTerm(pre, prim, mult); }
;
    
/*   
 * Primary = NonTerminal | Choice | Terminal 
 */
Element Primary
    =   id:Identifier !DEFINES
        { yyValue = NodeFactory.mkNonTerminal(id); }
      / LPAREN Choice RPAREN
      / Terminal
;

/*
 *  Terminal
 */
Element Terminal
  = lit:EscapedStringLiteral w
    { yyValue = NodeFactory.mkLiteral(lit); }
  / <CODEPOINT_SET> LBRACK rng:( !RBRACK CodePointRange )+ RBRACK w
    { yyValue = NodeFactory.mkCharClass(rng); }
  / <ANY_CODEPOINT> DOT
    { yyValue = NodeFactory.mkAnyChar(); }
;

/*
 *  Identifier = String
 */
String Identifier
  = f:IdentFirst r:IdentRest w
    { yyValue = f + r; }
;
transient String IdentFirst
  = [a-zA-Z_]
;
transient String IdentRest
  = [a-zA-Z0-9_.\-]*
;

/*
 *  Atomic tokens
 */
Character LINEBREAK     = '\\' nl w ;
Character ALT           = '/' w ;
Character AND           = '&' w ;
Character NOT           = '!' w ;
Character OPTION        = '?' w ;
Character STAR          = '*' w ;
Character PLUS          = '+' w ;
transient void DEFINES  = "<-"  ;
transient void LPAREN   = '(' w ;
transient void RPAREN   = ')' w ;
transient void LBRACK   = '['   ;
transient void RBRACK   = ']'   ;
transient void DOT      = '.' w ;


/* For use in HTML output (e.g. in the RRD renderer:
Identifiers must be a conformant XML NCName because of their possible use in hyperlinks and anchors.
(see: http://www.w3.org/TR/REC-xml-names/#NT-NCName)

NameStart     ::= ":" | [A-Z] | "_" | [a-z] | [\uC0-\uD6] | [\uD8-\uF6]
                      | [\uF8-\u2FF] | [\u370-\u37D] | [\u37F-\u1FFF] | [\u200C-\u200D]
                      | [\u2070-\u218F] | [\u2C00-\u2FEF] | [\u3001-\uD7FF]
                      | [\uF900-\uFDCF] | [\uFDF0-\uFFFD] | [\u10000-\uEFFFF]
NameRest      ::= NameStart | "-" | "." | [0-9] | \uB7 | [\u0300-\u036F] | [\u203F-\u2040]
Name          ::= NameStart (NameRest)*
NCName        ::= Name - (Char* ':' Char*)	// An XML Name, minus the ":"
*/
